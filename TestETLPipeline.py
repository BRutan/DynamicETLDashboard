#####################################
# TestETLPipeline.py
#####################################
# Description:
# * Using updated DynamicETL.Service appsettings-template.json 
# file generated by "ValidateAndAppendNewETL.py" script:
# 1) Open test version of WebAPI, execute post request using sample data file to test
# ETL pipeline on local MetricsDYETL database. 
# 2) Query local MetricsDYETL database, compare uploaded contents to original sample file.
# 3) Generate report accounting exceptions thrown by DynamicETL.Service or any source data versus
# uploaded data discrepancies.

from ETL.ETLJobLoader import ETLJobLoader
from ETL.ETLTester import ETLTester
import json
import os

def LoadArgsFromJSON():
    """
    * Pull and validate arguments from local json file.
    """
    req_args = set(['webapipath','dynamicetlservicepath','localserver','localdatabase','postargspath'])
    req_postargs = set(['id', 'fileid', 'subject', 'arg', 'fileName'])
    req_postargs_arg = set(['FilePath'])
    args = json.load(open('TestETLPipeline.json', 'rb'))
    
    # Validate arguments:
    errs = []
    missing = req_args - set(args.keys())
    if missing:
        errs.append('The following required args are missing: {%s}' % ','.join(missing))
        raise Exception(''.join(errs))
    
    # postargspath:
    if not os.path.exists(args['postargspath']):
        errs.append('(postargspath) Path does not exist.')
    elif not args['postargspath'].endswith('.json'):
        errs.append('(postargspath) Path must point to a json file.')
    else:
        post_args = json.load(open(args['postargspath'], 'rb'))
        missing = req_postargs - set(post_args.keys())
        if missing:
            errs.append('(postargspath) The following required arguments in json file are missing: {%s}' % ','.join(missing))
   
    # webapipath:
    if not os.path.exists(args['webapipath']):
        errs.append('(webapipath) Path does not exist.')
    elif not args['webapipath'].endswith('.dll'):
        errs.append('(webapipath) Path must point to dll.')

    # dynamicetlservicepath:
    if not os.path.exists(args['dynamicetlservicepath']):
        errs.append('(dynamicetlservicepath) Path does not exist.')
    elif not args['dynamicetlservicepath'].endswith('.dll'):
        errs.append('(dynamicetlservicepath) Path must point to dll.')

    if errs:
        raise Exception('\n'.join(errs))

    return args

def TestETLPipeline():
    print("------------------------------")
    print("TestETLPipeline: ")
    print("------------------------------")
    # Pull script parameters:
    args = LoadArgsFromJSON()
    # Load job to webapi:
    
    loader = ETLJobLoader()
    # Compare input versus output etl data:
    tester = ETLTester()
    tester.GenerateComparisonReport()


if __name__ == "__main__":
    ImplementAndTestETLPipeline()